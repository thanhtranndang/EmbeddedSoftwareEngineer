
stm32f4_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001610  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018dc  080018dc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080018dc  080018dc  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018dc  080018dc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080018e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000170  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001a2e  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000077e  00000000  00000000  00021b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002b0  00000000  00000000  000222c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001e4  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c6a  00000000  00000000  0002275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002ed6  00000000  00000000  000253c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c0e99  00000000  00000000  0002829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001320  00000000  00000000  000e9138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000ea458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001788 	.word	0x08001788

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08001788 	.word	0x08001788

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e015      	b.n	80002ac <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000280:	f000 fa60 	bl	8000744 <rand>
 8000284:	4602      	mov	r2, r0
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	009b      	lsls	r3, r3, #2
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	4419      	add	r1, r3
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <array_fill_numbers+0x50>)
 8000290:	fb83 0302 	smull	r0, r3, r3, r2
 8000294:	1198      	asrs	r0, r3, #6
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac3      	subs	r3, r0, r3
 800029a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800029e:	fb00 f303 	mul.w	r3, r0, r3
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d3e5      	bcc.n	8000280 <array_fill_numbers+0x10>
    }

}
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	10624dd3 	.word	0x10624dd3

080002c4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	480e      	ldr	r0, [pc, #56]	; (800030c <display_numbers+0x48>)
 80002d4:	f000 fb24 	bl	8000920 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	e00b      	b.n	80002f6 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4413      	add	r3, r2
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4809      	ldr	r0, [pc, #36]	; (8000310 <display_numbers+0x4c>)
 80002ec:	f000 fb18 	bl	8000920 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697a      	ldr	r2, [r7, #20]
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d3ef      	bcc.n	80002de <display_numbers+0x1a>
    }

    printf("\n");
 80002fe:	200a      	movs	r0, #10
 8000300:	f000 fb20 	bl	8000944 <putchar>
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	080017a0 	.word	0x080017a0
 8000310:	080017a4 	.word	0x080017a4

08000314 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <swap_numbers+0x30>)
 8000334:	220a      	movs	r2, #10
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	20000044 	.word	0x20000044

08000348 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	e02f      	b.n	80003bc <bubble_sort+0x74>
    {
        flag=0;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	e01d      	b.n	80003a2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	3301      	adds	r3, #1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	440b      	add	r3, r1
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	dd0d      	ble.n	800039c <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	18d0      	adds	r0, r2, r3
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	3301      	adds	r3, #1
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4619      	mov	r1, r3
 8000394:	f7ff ffbe 	bl	8000314 <swap_numbers>
                flag=1;
 8000398:	2301      	movs	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	3301      	adds	r3, #1
 80003a0:	613b      	str	r3, [r7, #16]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	1e5a      	subs	r2, r3, #1
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d8da      	bhi.n	8000366 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3301      	adds	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	1e5a      	subs	r2, r3, #1
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d8ca      	bhi.n	800035c <bubble_sort+0x14>
            break;
    }
}
 80003c6:	e000      	b.n	80003ca <bubble_sort+0x82>
            break;
 80003c8:	bf00      	nop
}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b087      	sub	sp, #28
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	e02c      	b.n	800043c <insertion_sort+0x6a>
     {
         j=i-1;
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 80003f4:	e00d      	b.n	8000412 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	441a      	add	r2, r3
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	3301      	adds	r3, #1
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	440b      	add	r3, r1
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	601a      	str	r2, [r3, #0]
             j--;
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	3b01      	subs	r3, #1
 8000410:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	2b00      	cmp	r3, #0
 8000416:	db07      	blt.n	8000428 <insertion_sort+0x56>
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	429a      	cmp	r2, r3
 8000426:	dbe6      	blt.n	80003f6 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3301      	adds	r3, #1
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	429a      	cmp	r2, r3
 8000442:	d8ce      	bhi.n	80003e2 <insertion_sort+0x10>
     }


}
 8000444:	bf00      	nop
 8000446:	bf00      	nop
 8000448:	371c      	adds	r7, #28
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <main>:



int main()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 800045a:	2311      	movs	r3, #17
 800045c:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <main+0x5c>)
 8000462:	f7ff ff05 	bl	8000270 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000466:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <main+0x60>)
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	4811      	ldr	r0, [pc, #68]	; (80004b0 <main+0x5c>)
 800046c:	f7ff ff2a 	bl	80002c4 <display_numbers>

    bubble_sort(numbers,len);
 8000470:	6879      	ldr	r1, [r7, #4]
 8000472:	480f      	ldr	r0, [pc, #60]	; (80004b0 <main+0x5c>)
 8000474:	f7ff ff68 	bl	8000348 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <main+0x64>)
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <main+0x5c>)
 800047e:	f7ff ff21 	bl	80002c4 <display_numbers>

    array_fill_numbers(numbers,len);
 8000482:	6879      	ldr	r1, [r7, #4]
 8000484:	480a      	ldr	r0, [pc, #40]	; (80004b0 <main+0x5c>)
 8000486:	f7ff fef3 	bl	8000270 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <main+0x68>)
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	4808      	ldr	r0, [pc, #32]	; (80004b0 <main+0x5c>)
 8000490:	f7ff ff18 	bl	80002c4 <display_numbers>

    insertion_sort(numbers,len);
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <main+0x5c>)
 8000498:	f7ff ff9b 	bl	80003d2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 800049c:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <main+0x6c>)
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <main+0x5c>)
 80004a2:	f7ff ff0f 	bl	80002c4 <display_numbers>



    return 0;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	080017ac 	.word	0x080017ac
 80004b8:	080017c0 	.word	0x080017c0
 80004bc:	080017d4 	.word	0x080017d4
 80004c0:	080017e8 	.word	0x080017e8

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000510:	f000 f904 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  return 1;
 800051c:	2301      	movs	r3, #1
}
 800051e:	4618      	mov	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_kill>:

int _kill(int pid, int sig)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000532:	f000 faa1 	bl	8000a78 <__errno>
 8000536:	4603      	mov	r3, r0
 8000538:	2216      	movs	r2, #22
 800053a:	601a      	str	r2, [r3, #0]
  return -1;
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_exit>:

void _exit (int status)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000550:	f04f 31ff 	mov.w	r1, #4294967295
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff ffe7 	bl	8000528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800055a:	e7fe      	b.n	800055a <_exit+0x12>

0800055c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	e00a      	b.n	8000584 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800056e:	f3af 8000 	nop.w
 8000572:	4601      	mov	r1, r0
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	60ba      	str	r2, [r7, #8]
 800057a:	b2ca      	uxtb	r2, r1
 800057c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbf0      	blt.n	800056e <_read+0x12>
  }

  return len;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	e009      	b.n	80005bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	60ba      	str	r2, [r7, #8]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	3301      	adds	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dbf1      	blt.n	80005a8 <_write+0x12>
  }
  return len;
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <_close>:

int _close(int file)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f6:	605a      	str	r2, [r3, #4]
  return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_isatty>:

int _isatty(int file)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f000 fa06 	bl	8000a78 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20020000 	.word	0x20020000
 8000698:	00000400 	.word	0x00000400
 800069c:	200000c4 	.word	0x200000c4
 80006a0:	20000218 	.word	0x20000218

080006a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006f2:	f7ff ffd7 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f000 f9c5 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006fa:	f7ff feab 	bl	8000454 <main>
  bx  lr    
 80006fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800070c:	080018e4 	.word	0x080018e4
  ldr r2, =_sbss
 8000710:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000714:	20000218 	.word	0x20000218

08000718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x20>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x24>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_IncTick+0x24>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000048 	.word	0x20000048
 8000740:	200000c8 	.word	0x200000c8

08000744 <rand>:
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <rand+0x5c>)
 8000746:	b510      	push	{r4, lr}
 8000748:	681c      	ldr	r4, [r3, #0]
 800074a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800074c:	b9b3      	cbnz	r3, 800077c <rand+0x38>
 800074e:	2018      	movs	r0, #24
 8000750:	f000 fa28 	bl	8000ba4 <malloc>
 8000754:	4602      	mov	r2, r0
 8000756:	6320      	str	r0, [r4, #48]	; 0x30
 8000758:	b920      	cbnz	r0, 8000764 <rand+0x20>
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <rand+0x60>)
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <rand+0x64>)
 800075e:	2152      	movs	r1, #82	; 0x52
 8000760:	f000 f9b6 	bl	8000ad0 <__assert_func>
 8000764:	4911      	ldr	r1, [pc, #68]	; (80007ac <rand+0x68>)
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <rand+0x6c>)
 8000768:	e9c0 1300 	strd	r1, r3, [r0]
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <rand+0x70>)
 800076e:	6083      	str	r3, [r0, #8]
 8000770:	230b      	movs	r3, #11
 8000772:	8183      	strh	r3, [r0, #12]
 8000774:	2100      	movs	r1, #0
 8000776:	2001      	movs	r0, #1
 8000778:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800077c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <rand+0x74>)
 8000780:	690b      	ldr	r3, [r1, #16]
 8000782:	694c      	ldr	r4, [r1, #20]
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <rand+0x78>)
 8000786:	4358      	muls	r0, r3
 8000788:	fb02 0004 	mla	r0, r2, r4, r0
 800078c:	fba3 3202 	umull	r3, r2, r3, r2
 8000790:	3301      	adds	r3, #1
 8000792:	eb40 0002 	adc.w	r0, r0, r2
 8000796:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800079a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800079e:	bd10      	pop	{r4, pc}
 80007a0:	200000a4 	.word	0x200000a4
 80007a4:	080017fb 	.word	0x080017fb
 80007a8:	08001812 	.word	0x08001812
 80007ac:	abcd330e 	.word	0xabcd330e
 80007b0:	e66d1234 	.word	0xe66d1234
 80007b4:	0005deec 	.word	0x0005deec
 80007b8:	5851f42d 	.word	0x5851f42d
 80007bc:	4c957f2d 	.word	0x4c957f2d

080007c0 <std>:
 80007c0:	2300      	movs	r3, #0
 80007c2:	b510      	push	{r4, lr}
 80007c4:	4604      	mov	r4, r0
 80007c6:	e9c0 3300 	strd	r3, r3, [r0]
 80007ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ce:	6083      	str	r3, [r0, #8]
 80007d0:	8181      	strh	r1, [r0, #12]
 80007d2:	6643      	str	r3, [r0, #100]	; 0x64
 80007d4:	81c2      	strh	r2, [r0, #14]
 80007d6:	6183      	str	r3, [r0, #24]
 80007d8:	4619      	mov	r1, r3
 80007da:	2208      	movs	r2, #8
 80007dc:	305c      	adds	r0, #92	; 0x5c
 80007de:	f000 f8fc 	bl	80009da <memset>
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <std+0x38>)
 80007e4:	6263      	str	r3, [r4, #36]	; 0x24
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <std+0x3c>)
 80007e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <std+0x40>)
 80007ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <std+0x44>)
 80007f0:	6224      	str	r4, [r4, #32]
 80007f2:	6323      	str	r3, [r4, #48]	; 0x30
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	bf00      	nop
 80007f8:	08000955 	.word	0x08000955
 80007fc:	08000977 	.word	0x08000977
 8000800:	080009af 	.word	0x080009af
 8000804:	080009d3 	.word	0x080009d3

08000808 <stdio_exit_handler>:
 8000808:	4a02      	ldr	r2, [pc, #8]	; (8000814 <stdio_exit_handler+0xc>)
 800080a:	4903      	ldr	r1, [pc, #12]	; (8000818 <stdio_exit_handler+0x10>)
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <stdio_exit_handler+0x14>)
 800080e:	f000 b869 	b.w	80008e4 <_fwalk_sglue>
 8000812:	bf00      	nop
 8000814:	2000004c 	.word	0x2000004c
 8000818:	080013c1 	.word	0x080013c1
 800081c:	20000058 	.word	0x20000058

08000820 <cleanup_stdio>:
 8000820:	6841      	ldr	r1, [r0, #4]
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <cleanup_stdio+0x34>)
 8000824:	4299      	cmp	r1, r3
 8000826:	b510      	push	{r4, lr}
 8000828:	4604      	mov	r4, r0
 800082a:	d001      	beq.n	8000830 <cleanup_stdio+0x10>
 800082c:	f000 fdc8 	bl	80013c0 <_fflush_r>
 8000830:	68a1      	ldr	r1, [r4, #8]
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <cleanup_stdio+0x38>)
 8000834:	4299      	cmp	r1, r3
 8000836:	d002      	beq.n	800083e <cleanup_stdio+0x1e>
 8000838:	4620      	mov	r0, r4
 800083a:	f000 fdc1 	bl	80013c0 <_fflush_r>
 800083e:	68e1      	ldr	r1, [r4, #12]
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <cleanup_stdio+0x3c>)
 8000842:	4299      	cmp	r1, r3
 8000844:	d004      	beq.n	8000850 <cleanup_stdio+0x30>
 8000846:	4620      	mov	r0, r4
 8000848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800084c:	f000 bdb8 	b.w	80013c0 <_fflush_r>
 8000850:	bd10      	pop	{r4, pc}
 8000852:	bf00      	nop
 8000854:	200000cc 	.word	0x200000cc
 8000858:	20000134 	.word	0x20000134
 800085c:	2000019c 	.word	0x2000019c

08000860 <global_stdio_init.part.0>:
 8000860:	b510      	push	{r4, lr}
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <global_stdio_init.part.0+0x30>)
 8000864:	4c0b      	ldr	r4, [pc, #44]	; (8000894 <global_stdio_init.part.0+0x34>)
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <global_stdio_init.part.0+0x38>)
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	4620      	mov	r0, r4
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	f7ff ffa6 	bl	80007c0 <std>
 8000874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000878:	2201      	movs	r2, #1
 800087a:	2109      	movs	r1, #9
 800087c:	f7ff ffa0 	bl	80007c0 <std>
 8000880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000884:	2202      	movs	r2, #2
 8000886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088a:	2112      	movs	r1, #18
 800088c:	f7ff bf98 	b.w	80007c0 <std>
 8000890:	20000204 	.word	0x20000204
 8000894:	200000cc 	.word	0x200000cc
 8000898:	08000809 	.word	0x08000809

0800089c <__sfp_lock_acquire>:
 800089c:	4801      	ldr	r0, [pc, #4]	; (80008a4 <__sfp_lock_acquire+0x8>)
 800089e:	f000 b915 	b.w	8000acc <__retarget_lock_acquire_recursive>
 80008a2:	bf00      	nop
 80008a4:	2000020d 	.word	0x2000020d

080008a8 <__sfp_lock_release>:
 80008a8:	4801      	ldr	r0, [pc, #4]	; (80008b0 <__sfp_lock_release+0x8>)
 80008aa:	f000 b910 	b.w	8000ace <__retarget_lock_release_recursive>
 80008ae:	bf00      	nop
 80008b0:	2000020d 	.word	0x2000020d

080008b4 <__sinit>:
 80008b4:	b510      	push	{r4, lr}
 80008b6:	4604      	mov	r4, r0
 80008b8:	f7ff fff0 	bl	800089c <__sfp_lock_acquire>
 80008bc:	6a23      	ldr	r3, [r4, #32]
 80008be:	b11b      	cbz	r3, 80008c8 <__sinit+0x14>
 80008c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c4:	f7ff bff0 	b.w	80008a8 <__sfp_lock_release>
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__sinit+0x28>)
 80008ca:	6223      	str	r3, [r4, #32]
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__sinit+0x2c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f5      	bne.n	80008c0 <__sinit+0xc>
 80008d4:	f7ff ffc4 	bl	8000860 <global_stdio_init.part.0>
 80008d8:	e7f2      	b.n	80008c0 <__sinit+0xc>
 80008da:	bf00      	nop
 80008dc:	08000821 	.word	0x08000821
 80008e0:	20000204 	.word	0x20000204

080008e4 <_fwalk_sglue>:
 80008e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e8:	4607      	mov	r7, r0
 80008ea:	4688      	mov	r8, r1
 80008ec:	4614      	mov	r4, r2
 80008ee:	2600      	movs	r6, #0
 80008f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f4:	f1b9 0901 	subs.w	r9, r9, #1
 80008f8:	d505      	bpl.n	8000906 <_fwalk_sglue+0x22>
 80008fa:	6824      	ldr	r4, [r4, #0]
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d1f7      	bne.n	80008f0 <_fwalk_sglue+0xc>
 8000900:	4630      	mov	r0, r6
 8000902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000906:	89ab      	ldrh	r3, [r5, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d907      	bls.n	800091c <_fwalk_sglue+0x38>
 800090c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	d003      	beq.n	800091c <_fwalk_sglue+0x38>
 8000914:	4629      	mov	r1, r5
 8000916:	4638      	mov	r0, r7
 8000918:	47c0      	blx	r8
 800091a:	4306      	orrs	r6, r0
 800091c:	3568      	adds	r5, #104	; 0x68
 800091e:	e7e9      	b.n	80008f4 <_fwalk_sglue+0x10>

08000920 <iprintf>:
 8000920:	b40f      	push	{r0, r1, r2, r3}
 8000922:	b507      	push	{r0, r1, r2, lr}
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <iprintf+0x20>)
 8000926:	ab04      	add	r3, sp, #16
 8000928:	6808      	ldr	r0, [r1, #0]
 800092a:	f853 2b04 	ldr.w	r2, [r3], #4
 800092e:	6881      	ldr	r1, [r0, #8]
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	f000 fa15 	bl	8000d60 <_vfiprintf_r>
 8000936:	b003      	add	sp, #12
 8000938:	f85d eb04 	ldr.w	lr, [sp], #4
 800093c:	b004      	add	sp, #16
 800093e:	4770      	bx	lr
 8000940:	200000a4 	.word	0x200000a4

08000944 <putchar>:
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <putchar+0xc>)
 8000946:	4601      	mov	r1, r0
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	6882      	ldr	r2, [r0, #8]
 800094c:	f000 bd72 	b.w	8001434 <_putc_r>
 8000950:	200000a4 	.word	0x200000a4

08000954 <__sread>:
 8000954:	b510      	push	{r4, lr}
 8000956:	460c      	mov	r4, r1
 8000958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095c:	f000 f868 	bl	8000a30 <_read_r>
 8000960:	2800      	cmp	r0, #0
 8000962:	bfab      	itete	ge
 8000964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000966:	89a3      	ldrhlt	r3, [r4, #12]
 8000968:	181b      	addge	r3, r3, r0
 800096a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800096e:	bfac      	ite	ge
 8000970:	6563      	strge	r3, [r4, #84]	; 0x54
 8000972:	81a3      	strhlt	r3, [r4, #12]
 8000974:	bd10      	pop	{r4, pc}

08000976 <__swrite>:
 8000976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800097a:	461f      	mov	r7, r3
 800097c:	898b      	ldrh	r3, [r1, #12]
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	4605      	mov	r5, r0
 8000982:	460c      	mov	r4, r1
 8000984:	4616      	mov	r6, r2
 8000986:	d505      	bpl.n	8000994 <__swrite+0x1e>
 8000988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098c:	2302      	movs	r3, #2
 800098e:	2200      	movs	r2, #0
 8000990:	f000 f83c 	bl	8000a0c <_lseek_r>
 8000994:	89a3      	ldrh	r3, [r4, #12]
 8000996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800099a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800099e:	81a3      	strh	r3, [r4, #12]
 80009a0:	4632      	mov	r2, r6
 80009a2:	463b      	mov	r3, r7
 80009a4:	4628      	mov	r0, r5
 80009a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009aa:	f000 b853 	b.w	8000a54 <_write_r>

080009ae <__sseek>:
 80009ae:	b510      	push	{r4, lr}
 80009b0:	460c      	mov	r4, r1
 80009b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009b6:	f000 f829 	bl	8000a0c <_lseek_r>
 80009ba:	1c43      	adds	r3, r0, #1
 80009bc:	89a3      	ldrh	r3, [r4, #12]
 80009be:	bf15      	itete	ne
 80009c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80009c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80009c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009ca:	81a3      	strheq	r3, [r4, #12]
 80009cc:	bf18      	it	ne
 80009ce:	81a3      	strhne	r3, [r4, #12]
 80009d0:	bd10      	pop	{r4, pc}

080009d2 <__sclose>:
 80009d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009d6:	f000 b809 	b.w	80009ec <_close_r>

080009da <memset>:
 80009da:	4402      	add	r2, r0
 80009dc:	4603      	mov	r3, r0
 80009de:	4293      	cmp	r3, r2
 80009e0:	d100      	bne.n	80009e4 <memset+0xa>
 80009e2:	4770      	bx	lr
 80009e4:	f803 1b01 	strb.w	r1, [r3], #1
 80009e8:	e7f9      	b.n	80009de <memset+0x4>
	...

080009ec <_close_r>:
 80009ec:	b538      	push	{r3, r4, r5, lr}
 80009ee:	4d06      	ldr	r5, [pc, #24]	; (8000a08 <_close_r+0x1c>)
 80009f0:	2300      	movs	r3, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	602b      	str	r3, [r5, #0]
 80009f8:	f7ff fde9 	bl	80005ce <_close>
 80009fc:	1c43      	adds	r3, r0, #1
 80009fe:	d102      	bne.n	8000a06 <_close_r+0x1a>
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	b103      	cbz	r3, 8000a06 <_close_r+0x1a>
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	bd38      	pop	{r3, r4, r5, pc}
 8000a08:	20000208 	.word	0x20000208

08000a0c <_lseek_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4d07      	ldr	r5, [pc, #28]	; (8000a2c <_lseek_r+0x20>)
 8000a10:	4604      	mov	r4, r0
 8000a12:	4608      	mov	r0, r1
 8000a14:	4611      	mov	r1, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	602a      	str	r2, [r5, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f7ff fdfe 	bl	800061c <_lseek>
 8000a20:	1c43      	adds	r3, r0, #1
 8000a22:	d102      	bne.n	8000a2a <_lseek_r+0x1e>
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	b103      	cbz	r3, 8000a2a <_lseek_r+0x1e>
 8000a28:	6023      	str	r3, [r4, #0]
 8000a2a:	bd38      	pop	{r3, r4, r5, pc}
 8000a2c:	20000208 	.word	0x20000208

08000a30 <_read_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4d07      	ldr	r5, [pc, #28]	; (8000a50 <_read_r+0x20>)
 8000a34:	4604      	mov	r4, r0
 8000a36:	4608      	mov	r0, r1
 8000a38:	4611      	mov	r1, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	602a      	str	r2, [r5, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f7ff fd8c 	bl	800055c <_read>
 8000a44:	1c43      	adds	r3, r0, #1
 8000a46:	d102      	bne.n	8000a4e <_read_r+0x1e>
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	b103      	cbz	r3, 8000a4e <_read_r+0x1e>
 8000a4c:	6023      	str	r3, [r4, #0]
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	20000208 	.word	0x20000208

08000a54 <_write_r>:
 8000a54:	b538      	push	{r3, r4, r5, lr}
 8000a56:	4d07      	ldr	r5, [pc, #28]	; (8000a74 <_write_r+0x20>)
 8000a58:	4604      	mov	r4, r0
 8000a5a:	4608      	mov	r0, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	2200      	movs	r2, #0
 8000a60:	602a      	str	r2, [r5, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	f7ff fd97 	bl	8000596 <_write>
 8000a68:	1c43      	adds	r3, r0, #1
 8000a6a:	d102      	bne.n	8000a72 <_write_r+0x1e>
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	b103      	cbz	r3, 8000a72 <_write_r+0x1e>
 8000a70:	6023      	str	r3, [r4, #0]
 8000a72:	bd38      	pop	{r3, r4, r5, pc}
 8000a74:	20000208 	.word	0x20000208

08000a78 <__errno>:
 8000a78:	4b01      	ldr	r3, [pc, #4]	; (8000a80 <__errno+0x8>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000a4 	.word	0x200000a4

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 fe76 	bl	8001788 <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	080018dc 	.word	0x080018dc
 8000ac0:	080018dc 	.word	0x080018dc
 8000ac4:	080018dc 	.word	0x080018dc
 8000ac8:	080018e0 	.word	0x080018e0

08000acc <__retarget_lock_acquire_recursive>:
 8000acc:	4770      	bx	lr

08000ace <__retarget_lock_release_recursive>:
 8000ace:	4770      	bx	lr

08000ad0 <__assert_func>:
 8000ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ad2:	4614      	mov	r4, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <__assert_func+0x2c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4605      	mov	r5, r0
 8000adc:	68d8      	ldr	r0, [r3, #12]
 8000ade:	b14c      	cbz	r4, 8000af4 <__assert_func+0x24>
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <__assert_func+0x30>)
 8000ae2:	9100      	str	r1, [sp, #0]
 8000ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000ae8:	4906      	ldr	r1, [pc, #24]	; (8000b04 <__assert_func+0x34>)
 8000aea:	462b      	mov	r3, r5
 8000aec:	f000 fc90 	bl	8001410 <fiprintf>
 8000af0:	f000 fd7a 	bl	80015e8 <abort>
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__assert_func+0x38>)
 8000af6:	461c      	mov	r4, r3
 8000af8:	e7f3      	b.n	8000ae2 <__assert_func+0x12>
 8000afa:	bf00      	nop
 8000afc:	200000a4 	.word	0x200000a4
 8000b00:	0800186a 	.word	0x0800186a
 8000b04:	08001877 	.word	0x08001877
 8000b08:	080018a5 	.word	0x080018a5

08000b0c <_free_r>:
 8000b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b0e:	2900      	cmp	r1, #0
 8000b10:	d044      	beq.n	8000b9c <_free_r+0x90>
 8000b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b16:	9001      	str	r0, [sp, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8000b1e:	bfb8      	it	lt
 8000b20:	18e4      	addlt	r4, r4, r3
 8000b22:	f000 f8e7 	bl	8000cf4 <__malloc_lock>
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <_free_r+0x94>)
 8000b28:	9801      	ldr	r0, [sp, #4]
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	b933      	cbnz	r3, 8000b3c <_free_r+0x30>
 8000b2e:	6063      	str	r3, [r4, #4]
 8000b30:	6014      	str	r4, [r2, #0]
 8000b32:	b003      	add	sp, #12
 8000b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b38:	f000 b8e2 	b.w	8000d00 <__malloc_unlock>
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <_free_r+0x46>
 8000b40:	6825      	ldr	r5, [r4, #0]
 8000b42:	1961      	adds	r1, r4, r5
 8000b44:	428b      	cmp	r3, r1
 8000b46:	bf01      	itttt	eq
 8000b48:	6819      	ldreq	r1, [r3, #0]
 8000b4a:	685b      	ldreq	r3, [r3, #4]
 8000b4c:	1949      	addeq	r1, r1, r5
 8000b4e:	6021      	streq	r1, [r4, #0]
 8000b50:	e7ed      	b.n	8000b2e <_free_r+0x22>
 8000b52:	461a      	mov	r2, r3
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b10b      	cbz	r3, 8000b5c <_free_r+0x50>
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d9fa      	bls.n	8000b52 <_free_r+0x46>
 8000b5c:	6811      	ldr	r1, [r2, #0]
 8000b5e:	1855      	adds	r5, r2, r1
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	d10b      	bne.n	8000b7c <_free_r+0x70>
 8000b64:	6824      	ldr	r4, [r4, #0]
 8000b66:	4421      	add	r1, r4
 8000b68:	1854      	adds	r4, r2, r1
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	6011      	str	r1, [r2, #0]
 8000b6e:	d1e0      	bne.n	8000b32 <_free_r+0x26>
 8000b70:	681c      	ldr	r4, [r3, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	6053      	str	r3, [r2, #4]
 8000b76:	440c      	add	r4, r1
 8000b78:	6014      	str	r4, [r2, #0]
 8000b7a:	e7da      	b.n	8000b32 <_free_r+0x26>
 8000b7c:	d902      	bls.n	8000b84 <_free_r+0x78>
 8000b7e:	230c      	movs	r3, #12
 8000b80:	6003      	str	r3, [r0, #0]
 8000b82:	e7d6      	b.n	8000b32 <_free_r+0x26>
 8000b84:	6825      	ldr	r5, [r4, #0]
 8000b86:	1961      	adds	r1, r4, r5
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	bf04      	itt	eq
 8000b8c:	6819      	ldreq	r1, [r3, #0]
 8000b8e:	685b      	ldreq	r3, [r3, #4]
 8000b90:	6063      	str	r3, [r4, #4]
 8000b92:	bf04      	itt	eq
 8000b94:	1949      	addeq	r1, r1, r5
 8000b96:	6021      	streq	r1, [r4, #0]
 8000b98:	6054      	str	r4, [r2, #4]
 8000b9a:	e7ca      	b.n	8000b32 <_free_r+0x26>
 8000b9c:	b003      	add	sp, #12
 8000b9e:	bd30      	pop	{r4, r5, pc}
 8000ba0:	20000210 	.word	0x20000210

08000ba4 <malloc>:
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <malloc+0xc>)
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	f000 b823 	b.w	8000bf4 <_malloc_r>
 8000bae:	bf00      	nop
 8000bb0:	200000a4 	.word	0x200000a4

08000bb4 <sbrk_aligned>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	4e0e      	ldr	r6, [pc, #56]	; (8000bf0 <sbrk_aligned+0x3c>)
 8000bb8:	460c      	mov	r4, r1
 8000bba:	6831      	ldr	r1, [r6, #0]
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	b911      	cbnz	r1, 8000bc6 <sbrk_aligned+0x12>
 8000bc0:	f000 fd02 	bl	80015c8 <_sbrk_r>
 8000bc4:	6030      	str	r0, [r6, #0]
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f000 fcfd 	bl	80015c8 <_sbrk_r>
 8000bce:	1c43      	adds	r3, r0, #1
 8000bd0:	d00a      	beq.n	8000be8 <sbrk_aligned+0x34>
 8000bd2:	1cc4      	adds	r4, r0, #3
 8000bd4:	f024 0403 	bic.w	r4, r4, #3
 8000bd8:	42a0      	cmp	r0, r4
 8000bda:	d007      	beq.n	8000bec <sbrk_aligned+0x38>
 8000bdc:	1a21      	subs	r1, r4, r0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f000 fcf2 	bl	80015c8 <_sbrk_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	d101      	bne.n	8000bec <sbrk_aligned+0x38>
 8000be8:	f04f 34ff 	mov.w	r4, #4294967295
 8000bec:	4620      	mov	r0, r4
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	20000214 	.word	0x20000214

08000bf4 <_malloc_r>:
 8000bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	1ccd      	adds	r5, r1, #3
 8000bfa:	f025 0503 	bic.w	r5, r5, #3
 8000bfe:	3508      	adds	r5, #8
 8000c00:	2d0c      	cmp	r5, #12
 8000c02:	bf38      	it	cc
 8000c04:	250c      	movcc	r5, #12
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	4607      	mov	r7, r0
 8000c0a:	db01      	blt.n	8000c10 <_malloc_r+0x1c>
 8000c0c:	42a9      	cmp	r1, r5
 8000c0e:	d905      	bls.n	8000c1c <_malloc_r+0x28>
 8000c10:	230c      	movs	r3, #12
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	2600      	movs	r6, #0
 8000c16:	4630      	mov	r0, r6
 8000c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cf0 <_malloc_r+0xfc>
 8000c20:	f000 f868 	bl	8000cf4 <__malloc_lock>
 8000c24:	f8d8 3000 	ldr.w	r3, [r8]
 8000c28:	461c      	mov	r4, r3
 8000c2a:	bb5c      	cbnz	r4, 8000c84 <_malloc_r+0x90>
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f7ff ffc0 	bl	8000bb4 <sbrk_aligned>
 8000c34:	1c43      	adds	r3, r0, #1
 8000c36:	4604      	mov	r4, r0
 8000c38:	d155      	bne.n	8000ce6 <_malloc_r+0xf2>
 8000c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8000c3e:	4626      	mov	r6, r4
 8000c40:	2e00      	cmp	r6, #0
 8000c42:	d145      	bne.n	8000cd0 <_malloc_r+0xdc>
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d048      	beq.n	8000cda <_malloc_r+0xe6>
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	4638      	mov	r0, r7
 8000c4e:	eb04 0903 	add.w	r9, r4, r3
 8000c52:	f000 fcb9 	bl	80015c8 <_sbrk_r>
 8000c56:	4581      	cmp	r9, r0
 8000c58:	d13f      	bne.n	8000cda <_malloc_r+0xe6>
 8000c5a:	6821      	ldr	r1, [r4, #0]
 8000c5c:	1a6d      	subs	r5, r5, r1
 8000c5e:	4629      	mov	r1, r5
 8000c60:	4638      	mov	r0, r7
 8000c62:	f7ff ffa7 	bl	8000bb4 <sbrk_aligned>
 8000c66:	3001      	adds	r0, #1
 8000c68:	d037      	beq.n	8000cda <_malloc_r+0xe6>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	442b      	add	r3, r5
 8000c6e:	6023      	str	r3, [r4, #0]
 8000c70:	f8d8 3000 	ldr.w	r3, [r8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d038      	beq.n	8000cea <_malloc_r+0xf6>
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	42a2      	cmp	r2, r4
 8000c7c:	d12b      	bne.n	8000cd6 <_malloc_r+0xe2>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	e00f      	b.n	8000ca4 <_malloc_r+0xb0>
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	1b52      	subs	r2, r2, r5
 8000c88:	d41f      	bmi.n	8000cca <_malloc_r+0xd6>
 8000c8a:	2a0b      	cmp	r2, #11
 8000c8c:	d917      	bls.n	8000cbe <_malloc_r+0xca>
 8000c8e:	1961      	adds	r1, r4, r5
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	6025      	str	r5, [r4, #0]
 8000c94:	bf18      	it	ne
 8000c96:	6059      	strne	r1, [r3, #4]
 8000c98:	6863      	ldr	r3, [r4, #4]
 8000c9a:	bf08      	it	eq
 8000c9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ca0:	5162      	str	r2, [r4, r5]
 8000ca2:	604b      	str	r3, [r1, #4]
 8000ca4:	4638      	mov	r0, r7
 8000ca6:	f104 060b 	add.w	r6, r4, #11
 8000caa:	f000 f829 	bl	8000d00 <__malloc_unlock>
 8000cae:	f026 0607 	bic.w	r6, r6, #7
 8000cb2:	1d23      	adds	r3, r4, #4
 8000cb4:	1af2      	subs	r2, r6, r3
 8000cb6:	d0ae      	beq.n	8000c16 <_malloc_r+0x22>
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	50a3      	str	r3, [r4, r2]
 8000cbc:	e7ab      	b.n	8000c16 <_malloc_r+0x22>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	6862      	ldr	r2, [r4, #4]
 8000cc2:	d1dd      	bne.n	8000c80 <_malloc_r+0x8c>
 8000cc4:	f8c8 2000 	str.w	r2, [r8]
 8000cc8:	e7ec      	b.n	8000ca4 <_malloc_r+0xb0>
 8000cca:	4623      	mov	r3, r4
 8000ccc:	6864      	ldr	r4, [r4, #4]
 8000cce:	e7ac      	b.n	8000c2a <_malloc_r+0x36>
 8000cd0:	4634      	mov	r4, r6
 8000cd2:	6876      	ldr	r6, [r6, #4]
 8000cd4:	e7b4      	b.n	8000c40 <_malloc_r+0x4c>
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	e7cc      	b.n	8000c74 <_malloc_r+0x80>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	f000 f80e 	bl	8000d00 <__malloc_unlock>
 8000ce4:	e797      	b.n	8000c16 <_malloc_r+0x22>
 8000ce6:	6025      	str	r5, [r4, #0]
 8000ce8:	e7dc      	b.n	8000ca4 <_malloc_r+0xb0>
 8000cea:	605b      	str	r3, [r3, #4]
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	bf00      	nop
 8000cf0:	20000210 	.word	0x20000210

08000cf4 <__malloc_lock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	; (8000cfc <__malloc_lock+0x8>)
 8000cf6:	f7ff bee9 	b.w	8000acc <__retarget_lock_acquire_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	2000020c 	.word	0x2000020c

08000d00 <__malloc_unlock>:
 8000d00:	4801      	ldr	r0, [pc, #4]	; (8000d08 <__malloc_unlock+0x8>)
 8000d02:	f7ff bee4 	b.w	8000ace <__retarget_lock_release_recursive>
 8000d06:	bf00      	nop
 8000d08:	2000020c 	.word	0x2000020c

08000d0c <__sfputc_r>:
 8000d0c:	6893      	ldr	r3, [r2, #8]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	b410      	push	{r4}
 8000d14:	6093      	str	r3, [r2, #8]
 8000d16:	da08      	bge.n	8000d2a <__sfputc_r+0x1e>
 8000d18:	6994      	ldr	r4, [r2, #24]
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	db01      	blt.n	8000d22 <__sfputc_r+0x16>
 8000d1e:	290a      	cmp	r1, #10
 8000d20:	d103      	bne.n	8000d2a <__sfputc_r+0x1e>
 8000d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d26:	f000 bbb9 	b.w	800149c <__swbuf_r>
 8000d2a:	6813      	ldr	r3, [r2, #0]
 8000d2c:	1c58      	adds	r0, r3, #1
 8000d2e:	6010      	str	r0, [r2, #0]
 8000d30:	7019      	strb	r1, [r3, #0]
 8000d32:	4608      	mov	r0, r1
 8000d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <__sfputs_r>:
 8000d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3c:	4606      	mov	r6, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	4614      	mov	r4, r2
 8000d42:	18d5      	adds	r5, r2, r3
 8000d44:	42ac      	cmp	r4, r5
 8000d46:	d101      	bne.n	8000d4c <__sfputs_r+0x12>
 8000d48:	2000      	movs	r0, #0
 8000d4a:	e007      	b.n	8000d5c <__sfputs_r+0x22>
 8000d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d50:	463a      	mov	r2, r7
 8000d52:	4630      	mov	r0, r6
 8000d54:	f7ff ffda 	bl	8000d0c <__sfputc_r>
 8000d58:	1c43      	adds	r3, r0, #1
 8000d5a:	d1f3      	bne.n	8000d44 <__sfputs_r+0xa>
 8000d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d60 <_vfiprintf_r>:
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	460d      	mov	r5, r1
 8000d66:	b09d      	sub	sp, #116	; 0x74
 8000d68:	4614      	mov	r4, r2
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	b118      	cbz	r0, 8000d78 <_vfiprintf_r+0x18>
 8000d70:	6a03      	ldr	r3, [r0, #32]
 8000d72:	b90b      	cbnz	r3, 8000d78 <_vfiprintf_r+0x18>
 8000d74:	f7ff fd9e 	bl	80008b4 <__sinit>
 8000d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d7a:	07d9      	lsls	r1, r3, #31
 8000d7c:	d405      	bmi.n	8000d8a <_vfiprintf_r+0x2a>
 8000d7e:	89ab      	ldrh	r3, [r5, #12]
 8000d80:	059a      	lsls	r2, r3, #22
 8000d82:	d402      	bmi.n	8000d8a <_vfiprintf_r+0x2a>
 8000d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d86:	f7ff fea1 	bl	8000acc <__retarget_lock_acquire_recursive>
 8000d8a:	89ab      	ldrh	r3, [r5, #12]
 8000d8c:	071b      	lsls	r3, r3, #28
 8000d8e:	d501      	bpl.n	8000d94 <_vfiprintf_r+0x34>
 8000d90:	692b      	ldr	r3, [r5, #16]
 8000d92:	b99b      	cbnz	r3, 8000dbc <_vfiprintf_r+0x5c>
 8000d94:	4629      	mov	r1, r5
 8000d96:	4630      	mov	r0, r6
 8000d98:	f000 fbbe 	bl	8001518 <__swsetup_r>
 8000d9c:	b170      	cbz	r0, 8000dbc <_vfiprintf_r+0x5c>
 8000d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000da0:	07dc      	lsls	r4, r3, #31
 8000da2:	d504      	bpl.n	8000dae <_vfiprintf_r+0x4e>
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	b01d      	add	sp, #116	; 0x74
 8000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dae:	89ab      	ldrh	r3, [r5, #12]
 8000db0:	0598      	lsls	r0, r3, #22
 8000db2:	d4f7      	bmi.n	8000da4 <_vfiprintf_r+0x44>
 8000db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000db6:	f7ff fe8a 	bl	8000ace <__retarget_lock_release_recursive>
 8000dba:	e7f3      	b.n	8000da4 <_vfiprintf_r+0x44>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dca:	2330      	movs	r3, #48	; 0x30
 8000dcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000f80 <_vfiprintf_r+0x220>
 8000dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dd4:	f04f 0901 	mov.w	r9, #1
 8000dd8:	4623      	mov	r3, r4
 8000dda:	469a      	mov	sl, r3
 8000ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000de0:	b10a      	cbz	r2, 8000de6 <_vfiprintf_r+0x86>
 8000de2:	2a25      	cmp	r2, #37	; 0x25
 8000de4:	d1f9      	bne.n	8000dda <_vfiprintf_r+0x7a>
 8000de6:	ebba 0b04 	subs.w	fp, sl, r4
 8000dea:	d00b      	beq.n	8000e04 <_vfiprintf_r+0xa4>
 8000dec:	465b      	mov	r3, fp
 8000dee:	4622      	mov	r2, r4
 8000df0:	4629      	mov	r1, r5
 8000df2:	4630      	mov	r0, r6
 8000df4:	f7ff ffa1 	bl	8000d3a <__sfputs_r>
 8000df8:	3001      	adds	r0, #1
 8000dfa:	f000 80a9 	beq.w	8000f50 <_vfiprintf_r+0x1f0>
 8000dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e00:	445a      	add	r2, fp
 8000e02:	9209      	str	r2, [sp, #36]	; 0x24
 8000e04:	f89a 3000 	ldrb.w	r3, [sl]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 80a1 	beq.w	8000f50 <_vfiprintf_r+0x1f0>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e18:	f10a 0a01 	add.w	sl, sl, #1
 8000e1c:	9304      	str	r3, [sp, #16]
 8000e1e:	9307      	str	r3, [sp, #28]
 8000e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e24:	931a      	str	r3, [sp, #104]	; 0x68
 8000e26:	4654      	mov	r4, sl
 8000e28:	2205      	movs	r2, #5
 8000e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2e:	4854      	ldr	r0, [pc, #336]	; (8000f80 <_vfiprintf_r+0x220>)
 8000e30:	f7ff f9ce 	bl	80001d0 <memchr>
 8000e34:	9a04      	ldr	r2, [sp, #16]
 8000e36:	b9d8      	cbnz	r0, 8000e70 <_vfiprintf_r+0x110>
 8000e38:	06d1      	lsls	r1, r2, #27
 8000e3a:	bf44      	itt	mi
 8000e3c:	2320      	movmi	r3, #32
 8000e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e42:	0713      	lsls	r3, r2, #28
 8000e44:	bf44      	itt	mi
 8000e46:	232b      	movmi	r3, #43	; 0x2b
 8000e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e50:	2b2a      	cmp	r3, #42	; 0x2a
 8000e52:	d015      	beq.n	8000e80 <_vfiprintf_r+0x120>
 8000e54:	9a07      	ldr	r2, [sp, #28]
 8000e56:	4654      	mov	r4, sl
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f04f 0c0a 	mov.w	ip, #10
 8000e5e:	4621      	mov	r1, r4
 8000e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e64:	3b30      	subs	r3, #48	; 0x30
 8000e66:	2b09      	cmp	r3, #9
 8000e68:	d94d      	bls.n	8000f06 <_vfiprintf_r+0x1a6>
 8000e6a:	b1b0      	cbz	r0, 8000e9a <_vfiprintf_r+0x13a>
 8000e6c:	9207      	str	r2, [sp, #28]
 8000e6e:	e014      	b.n	8000e9a <_vfiprintf_r+0x13a>
 8000e70:	eba0 0308 	sub.w	r3, r0, r8
 8000e74:	fa09 f303 	lsl.w	r3, r9, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	9304      	str	r3, [sp, #16]
 8000e7c:	46a2      	mov	sl, r4
 8000e7e:	e7d2      	b.n	8000e26 <_vfiprintf_r+0xc6>
 8000e80:	9b03      	ldr	r3, [sp, #12]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	9103      	str	r1, [sp, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bfbb      	ittet	lt
 8000e8c:	425b      	neglt	r3, r3
 8000e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8000e92:	9307      	strge	r3, [sp, #28]
 8000e94:	9307      	strlt	r3, [sp, #28]
 8000e96:	bfb8      	it	lt
 8000e98:	9204      	strlt	r2, [sp, #16]
 8000e9a:	7823      	ldrb	r3, [r4, #0]
 8000e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e9e:	d10c      	bne.n	8000eba <_vfiprintf_r+0x15a>
 8000ea0:	7863      	ldrb	r3, [r4, #1]
 8000ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ea4:	d134      	bne.n	8000f10 <_vfiprintf_r+0x1b0>
 8000ea6:	9b03      	ldr	r3, [sp, #12]
 8000ea8:	1d1a      	adds	r2, r3, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	9203      	str	r2, [sp, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bfb8      	it	lt
 8000eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000eb6:	3402      	adds	r4, #2
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000f90 <_vfiprintf_r+0x230>
 8000ebe:	7821      	ldrb	r1, [r4, #0]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4650      	mov	r0, sl
 8000ec4:	f7ff f984 	bl	80001d0 <memchr>
 8000ec8:	b138      	cbz	r0, 8000eda <_vfiprintf_r+0x17a>
 8000eca:	9b04      	ldr	r3, [sp, #16]
 8000ecc:	eba0 000a 	sub.w	r0, r0, sl
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	4082      	lsls	r2, r0
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	3401      	adds	r4, #1
 8000ed8:	9304      	str	r3, [sp, #16]
 8000eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ede:	4829      	ldr	r0, [pc, #164]	; (8000f84 <_vfiprintf_r+0x224>)
 8000ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ee4:	2206      	movs	r2, #6
 8000ee6:	f7ff f973 	bl	80001d0 <memchr>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	d03f      	beq.n	8000f6e <_vfiprintf_r+0x20e>
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <_vfiprintf_r+0x228>)
 8000ef0:	bb1b      	cbnz	r3, 8000f3a <_vfiprintf_r+0x1da>
 8000ef2:	9b03      	ldr	r3, [sp, #12]
 8000ef4:	3307      	adds	r3, #7
 8000ef6:	f023 0307 	bic.w	r3, r3, #7
 8000efa:	3308      	adds	r3, #8
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f00:	443b      	add	r3, r7
 8000f02:	9309      	str	r3, [sp, #36]	; 0x24
 8000f04:	e768      	b.n	8000dd8 <_vfiprintf_r+0x78>
 8000f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	e7a6      	b.n	8000e5e <_vfiprintf_r+0xfe>
 8000f10:	2300      	movs	r3, #0
 8000f12:	3401      	adds	r4, #1
 8000f14:	9305      	str	r3, [sp, #20]
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 0c0a 	mov.w	ip, #10
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f22:	3a30      	subs	r2, #48	; 0x30
 8000f24:	2a09      	cmp	r2, #9
 8000f26:	d903      	bls.n	8000f30 <_vfiprintf_r+0x1d0>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0c6      	beq.n	8000eba <_vfiprintf_r+0x15a>
 8000f2c:	9105      	str	r1, [sp, #20]
 8000f2e:	e7c4      	b.n	8000eba <_vfiprintf_r+0x15a>
 8000f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f34:	4604      	mov	r4, r0
 8000f36:	2301      	movs	r3, #1
 8000f38:	e7f0      	b.n	8000f1c <_vfiprintf_r+0x1bc>
 8000f3a:	ab03      	add	r3, sp, #12
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	462a      	mov	r2, r5
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <_vfiprintf_r+0x22c>)
 8000f42:	a904      	add	r1, sp, #16
 8000f44:	4630      	mov	r0, r6
 8000f46:	f3af 8000 	nop.w
 8000f4a:	4607      	mov	r7, r0
 8000f4c:	1c78      	adds	r0, r7, #1
 8000f4e:	d1d6      	bne.n	8000efe <_vfiprintf_r+0x19e>
 8000f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f52:	07d9      	lsls	r1, r3, #31
 8000f54:	d405      	bmi.n	8000f62 <_vfiprintf_r+0x202>
 8000f56:	89ab      	ldrh	r3, [r5, #12]
 8000f58:	059a      	lsls	r2, r3, #22
 8000f5a:	d402      	bmi.n	8000f62 <_vfiprintf_r+0x202>
 8000f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f5e:	f7ff fdb6 	bl	8000ace <__retarget_lock_release_recursive>
 8000f62:	89ab      	ldrh	r3, [r5, #12]
 8000f64:	065b      	lsls	r3, r3, #25
 8000f66:	f53f af1d 	bmi.w	8000da4 <_vfiprintf_r+0x44>
 8000f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f6c:	e71c      	b.n	8000da8 <_vfiprintf_r+0x48>
 8000f6e:	ab03      	add	r3, sp, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	462a      	mov	r2, r5
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <_vfiprintf_r+0x22c>)
 8000f76:	a904      	add	r1, sp, #16
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f000 f879 	bl	8001070 <_printf_i>
 8000f7e:	e7e4      	b.n	8000f4a <_vfiprintf_r+0x1ea>
 8000f80:	080018a6 	.word	0x080018a6
 8000f84:	080018b0 	.word	0x080018b0
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	08000d3b 	.word	0x08000d3b
 8000f90:	080018ac 	.word	0x080018ac

08000f94 <_printf_common>:
 8000f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	4616      	mov	r6, r2
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	688a      	ldr	r2, [r1, #8]
 8000f9e:	690b      	ldr	r3, [r1, #16]
 8000fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	bfb8      	it	lt
 8000fa8:	4613      	movlt	r3, r2
 8000faa:	6033      	str	r3, [r6, #0]
 8000fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fb0:	4607      	mov	r7, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	b10a      	cbz	r2, 8000fba <_printf_common+0x26>
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	6033      	str	r3, [r6, #0]
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	0699      	lsls	r1, r3, #26
 8000fbe:	bf42      	ittt	mi
 8000fc0:	6833      	ldrmi	r3, [r6, #0]
 8000fc2:	3302      	addmi	r3, #2
 8000fc4:	6033      	strmi	r3, [r6, #0]
 8000fc6:	6825      	ldr	r5, [r4, #0]
 8000fc8:	f015 0506 	ands.w	r5, r5, #6
 8000fcc:	d106      	bne.n	8000fdc <_printf_common+0x48>
 8000fce:	f104 0a19 	add.w	sl, r4, #25
 8000fd2:	68e3      	ldr	r3, [r4, #12]
 8000fd4:	6832      	ldr	r2, [r6, #0]
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	42ab      	cmp	r3, r5
 8000fda:	dc26      	bgt.n	800102a <_printf_common+0x96>
 8000fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fe0:	1e13      	subs	r3, r2, #0
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	bf18      	it	ne
 8000fe6:	2301      	movne	r3, #1
 8000fe8:	0692      	lsls	r2, r2, #26
 8000fea:	d42b      	bmi.n	8001044 <_printf_common+0xb0>
 8000fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ff0:	4649      	mov	r1, r9
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	47c0      	blx	r8
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	d01e      	beq.n	8001038 <_printf_common+0xa4>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	6922      	ldr	r2, [r4, #16]
 8000ffe:	f003 0306 	and.w	r3, r3, #6
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf02      	ittt	eq
 8001006:	68e5      	ldreq	r5, [r4, #12]
 8001008:	6833      	ldreq	r3, [r6, #0]
 800100a:	1aed      	subeq	r5, r5, r3
 800100c:	68a3      	ldr	r3, [r4, #8]
 800100e:	bf0c      	ite	eq
 8001010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001014:	2500      	movne	r5, #0
 8001016:	4293      	cmp	r3, r2
 8001018:	bfc4      	itt	gt
 800101a:	1a9b      	subgt	r3, r3, r2
 800101c:	18ed      	addgt	r5, r5, r3
 800101e:	2600      	movs	r6, #0
 8001020:	341a      	adds	r4, #26
 8001022:	42b5      	cmp	r5, r6
 8001024:	d11a      	bne.n	800105c <_printf_common+0xc8>
 8001026:	2000      	movs	r0, #0
 8001028:	e008      	b.n	800103c <_printf_common+0xa8>
 800102a:	2301      	movs	r3, #1
 800102c:	4652      	mov	r2, sl
 800102e:	4649      	mov	r1, r9
 8001030:	4638      	mov	r0, r7
 8001032:	47c0      	blx	r8
 8001034:	3001      	adds	r0, #1
 8001036:	d103      	bne.n	8001040 <_printf_common+0xac>
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001040:	3501      	adds	r5, #1
 8001042:	e7c6      	b.n	8000fd2 <_printf_common+0x3e>
 8001044:	18e1      	adds	r1, r4, r3
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	2030      	movs	r0, #48	; 0x30
 800104a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800104e:	4422      	add	r2, r4
 8001050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001058:	3302      	adds	r3, #2
 800105a:	e7c7      	b.n	8000fec <_printf_common+0x58>
 800105c:	2301      	movs	r3, #1
 800105e:	4622      	mov	r2, r4
 8001060:	4649      	mov	r1, r9
 8001062:	4638      	mov	r0, r7
 8001064:	47c0      	blx	r8
 8001066:	3001      	adds	r0, #1
 8001068:	d0e6      	beq.n	8001038 <_printf_common+0xa4>
 800106a:	3601      	adds	r6, #1
 800106c:	e7d9      	b.n	8001022 <_printf_common+0x8e>
	...

08001070 <_printf_i>:
 8001070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001074:	7e0f      	ldrb	r7, [r1, #24]
 8001076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001078:	2f78      	cmp	r7, #120	; 0x78
 800107a:	4691      	mov	r9, r2
 800107c:	4680      	mov	r8, r0
 800107e:	460c      	mov	r4, r1
 8001080:	469a      	mov	sl, r3
 8001082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001086:	d807      	bhi.n	8001098 <_printf_i+0x28>
 8001088:	2f62      	cmp	r7, #98	; 0x62
 800108a:	d80a      	bhi.n	80010a2 <_printf_i+0x32>
 800108c:	2f00      	cmp	r7, #0
 800108e:	f000 80d4 	beq.w	800123a <_printf_i+0x1ca>
 8001092:	2f58      	cmp	r7, #88	; 0x58
 8001094:	f000 80c0 	beq.w	8001218 <_printf_i+0x1a8>
 8001098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800109c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010a0:	e03a      	b.n	8001118 <_printf_i+0xa8>
 80010a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010a6:	2b15      	cmp	r3, #21
 80010a8:	d8f6      	bhi.n	8001098 <_printf_i+0x28>
 80010aa:	a101      	add	r1, pc, #4	; (adr r1, 80010b0 <_printf_i+0x40>)
 80010ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010b0:	08001109 	.word	0x08001109
 80010b4:	0800111d 	.word	0x0800111d
 80010b8:	08001099 	.word	0x08001099
 80010bc:	08001099 	.word	0x08001099
 80010c0:	08001099 	.word	0x08001099
 80010c4:	08001099 	.word	0x08001099
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	08001099 	.word	0x08001099
 80010d0:	08001099 	.word	0x08001099
 80010d4:	08001099 	.word	0x08001099
 80010d8:	08001099 	.word	0x08001099
 80010dc:	08001221 	.word	0x08001221
 80010e0:	08001149 	.word	0x08001149
 80010e4:	080011db 	.word	0x080011db
 80010e8:	08001099 	.word	0x08001099
 80010ec:	08001099 	.word	0x08001099
 80010f0:	08001243 	.word	0x08001243
 80010f4:	08001099 	.word	0x08001099
 80010f8:	08001149 	.word	0x08001149
 80010fc:	08001099 	.word	0x08001099
 8001100:	08001099 	.word	0x08001099
 8001104:	080011e3 	.word	0x080011e3
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	1d1a      	adds	r2, r3, #4
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	602a      	str	r2, [r5, #0]
 8001110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001118:	2301      	movs	r3, #1
 800111a:	e09f      	b.n	800125c <_printf_i+0x1ec>
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	682b      	ldr	r3, [r5, #0]
 8001120:	0607      	lsls	r7, r0, #24
 8001122:	f103 0104 	add.w	r1, r3, #4
 8001126:	6029      	str	r1, [r5, #0]
 8001128:	d501      	bpl.n	800112e <_printf_i+0xbe>
 800112a:	681e      	ldr	r6, [r3, #0]
 800112c:	e003      	b.n	8001136 <_printf_i+0xc6>
 800112e:	0646      	lsls	r6, r0, #25
 8001130:	d5fb      	bpl.n	800112a <_printf_i+0xba>
 8001132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001136:	2e00      	cmp	r6, #0
 8001138:	da03      	bge.n	8001142 <_printf_i+0xd2>
 800113a:	232d      	movs	r3, #45	; 0x2d
 800113c:	4276      	negs	r6, r6
 800113e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001142:	485a      	ldr	r0, [pc, #360]	; (80012ac <_printf_i+0x23c>)
 8001144:	230a      	movs	r3, #10
 8001146:	e012      	b.n	800116e <_printf_i+0xfe>
 8001148:	682b      	ldr	r3, [r5, #0]
 800114a:	6820      	ldr	r0, [r4, #0]
 800114c:	1d19      	adds	r1, r3, #4
 800114e:	6029      	str	r1, [r5, #0]
 8001150:	0605      	lsls	r5, r0, #24
 8001152:	d501      	bpl.n	8001158 <_printf_i+0xe8>
 8001154:	681e      	ldr	r6, [r3, #0]
 8001156:	e002      	b.n	800115e <_printf_i+0xee>
 8001158:	0641      	lsls	r1, r0, #25
 800115a:	d5fb      	bpl.n	8001154 <_printf_i+0xe4>
 800115c:	881e      	ldrh	r6, [r3, #0]
 800115e:	4853      	ldr	r0, [pc, #332]	; (80012ac <_printf_i+0x23c>)
 8001160:	2f6f      	cmp	r7, #111	; 0x6f
 8001162:	bf0c      	ite	eq
 8001164:	2308      	moveq	r3, #8
 8001166:	230a      	movne	r3, #10
 8001168:	2100      	movs	r1, #0
 800116a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800116e:	6865      	ldr	r5, [r4, #4]
 8001170:	60a5      	str	r5, [r4, #8]
 8001172:	2d00      	cmp	r5, #0
 8001174:	bfa2      	ittt	ge
 8001176:	6821      	ldrge	r1, [r4, #0]
 8001178:	f021 0104 	bicge.w	r1, r1, #4
 800117c:	6021      	strge	r1, [r4, #0]
 800117e:	b90e      	cbnz	r6, 8001184 <_printf_i+0x114>
 8001180:	2d00      	cmp	r5, #0
 8001182:	d04b      	beq.n	800121c <_printf_i+0x1ac>
 8001184:	4615      	mov	r5, r2
 8001186:	fbb6 f1f3 	udiv	r1, r6, r3
 800118a:	fb03 6711 	mls	r7, r3, r1, r6
 800118e:	5dc7      	ldrb	r7, [r0, r7]
 8001190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001194:	4637      	mov	r7, r6
 8001196:	42bb      	cmp	r3, r7
 8001198:	460e      	mov	r6, r1
 800119a:	d9f4      	bls.n	8001186 <_printf_i+0x116>
 800119c:	2b08      	cmp	r3, #8
 800119e:	d10b      	bne.n	80011b8 <_printf_i+0x148>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	07de      	lsls	r6, r3, #31
 80011a4:	d508      	bpl.n	80011b8 <_printf_i+0x148>
 80011a6:	6923      	ldr	r3, [r4, #16]
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	4299      	cmp	r1, r3
 80011ac:	bfde      	ittt	le
 80011ae:	2330      	movle	r3, #48	; 0x30
 80011b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011b8:	1b52      	subs	r2, r2, r5
 80011ba:	6122      	str	r2, [r4, #16]
 80011bc:	f8cd a000 	str.w	sl, [sp]
 80011c0:	464b      	mov	r3, r9
 80011c2:	aa03      	add	r2, sp, #12
 80011c4:	4621      	mov	r1, r4
 80011c6:	4640      	mov	r0, r8
 80011c8:	f7ff fee4 	bl	8000f94 <_printf_common>
 80011cc:	3001      	adds	r0, #1
 80011ce:	d14a      	bne.n	8001266 <_printf_i+0x1f6>
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	b004      	add	sp, #16
 80011d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	4833      	ldr	r0, [pc, #204]	; (80012b0 <_printf_i+0x240>)
 80011e4:	2778      	movs	r7, #120	; 0x78
 80011e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	6829      	ldr	r1, [r5, #0]
 80011ee:	061f      	lsls	r7, r3, #24
 80011f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80011f4:	d402      	bmi.n	80011fc <_printf_i+0x18c>
 80011f6:	065f      	lsls	r7, r3, #25
 80011f8:	bf48      	it	mi
 80011fa:	b2b6      	uxthmi	r6, r6
 80011fc:	07df      	lsls	r7, r3, #31
 80011fe:	bf48      	it	mi
 8001200:	f043 0320 	orrmi.w	r3, r3, #32
 8001204:	6029      	str	r1, [r5, #0]
 8001206:	bf48      	it	mi
 8001208:	6023      	strmi	r3, [r4, #0]
 800120a:	b91e      	cbnz	r6, 8001214 <_printf_i+0x1a4>
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	f023 0320 	bic.w	r3, r3, #32
 8001212:	6023      	str	r3, [r4, #0]
 8001214:	2310      	movs	r3, #16
 8001216:	e7a7      	b.n	8001168 <_printf_i+0xf8>
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <_printf_i+0x23c>)
 800121a:	e7e4      	b.n	80011e6 <_printf_i+0x176>
 800121c:	4615      	mov	r5, r2
 800121e:	e7bd      	b.n	800119c <_printf_i+0x12c>
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	6826      	ldr	r6, [r4, #0]
 8001224:	6961      	ldr	r1, [r4, #20]
 8001226:	1d18      	adds	r0, r3, #4
 8001228:	6028      	str	r0, [r5, #0]
 800122a:	0635      	lsls	r5, r6, #24
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	d501      	bpl.n	8001234 <_printf_i+0x1c4>
 8001230:	6019      	str	r1, [r3, #0]
 8001232:	e002      	b.n	800123a <_printf_i+0x1ca>
 8001234:	0670      	lsls	r0, r6, #25
 8001236:	d5fb      	bpl.n	8001230 <_printf_i+0x1c0>
 8001238:	8019      	strh	r1, [r3, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	6123      	str	r3, [r4, #16]
 800123e:	4615      	mov	r5, r2
 8001240:	e7bc      	b.n	80011bc <_printf_i+0x14c>
 8001242:	682b      	ldr	r3, [r5, #0]
 8001244:	1d1a      	adds	r2, r3, #4
 8001246:	602a      	str	r2, [r5, #0]
 8001248:	681d      	ldr	r5, [r3, #0]
 800124a:	6862      	ldr	r2, [r4, #4]
 800124c:	2100      	movs	r1, #0
 800124e:	4628      	mov	r0, r5
 8001250:	f7fe ffbe 	bl	80001d0 <memchr>
 8001254:	b108      	cbz	r0, 800125a <_printf_i+0x1ea>
 8001256:	1b40      	subs	r0, r0, r5
 8001258:	6060      	str	r0, [r4, #4]
 800125a:	6863      	ldr	r3, [r4, #4]
 800125c:	6123      	str	r3, [r4, #16]
 800125e:	2300      	movs	r3, #0
 8001260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001264:	e7aa      	b.n	80011bc <_printf_i+0x14c>
 8001266:	6923      	ldr	r3, [r4, #16]
 8001268:	462a      	mov	r2, r5
 800126a:	4649      	mov	r1, r9
 800126c:	4640      	mov	r0, r8
 800126e:	47d0      	blx	sl
 8001270:	3001      	adds	r0, #1
 8001272:	d0ad      	beq.n	80011d0 <_printf_i+0x160>
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	079b      	lsls	r3, r3, #30
 8001278:	d413      	bmi.n	80012a2 <_printf_i+0x232>
 800127a:	68e0      	ldr	r0, [r4, #12]
 800127c:	9b03      	ldr	r3, [sp, #12]
 800127e:	4298      	cmp	r0, r3
 8001280:	bfb8      	it	lt
 8001282:	4618      	movlt	r0, r3
 8001284:	e7a6      	b.n	80011d4 <_printf_i+0x164>
 8001286:	2301      	movs	r3, #1
 8001288:	4632      	mov	r2, r6
 800128a:	4649      	mov	r1, r9
 800128c:	4640      	mov	r0, r8
 800128e:	47d0      	blx	sl
 8001290:	3001      	adds	r0, #1
 8001292:	d09d      	beq.n	80011d0 <_printf_i+0x160>
 8001294:	3501      	adds	r5, #1
 8001296:	68e3      	ldr	r3, [r4, #12]
 8001298:	9903      	ldr	r1, [sp, #12]
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	42ab      	cmp	r3, r5
 800129e:	dcf2      	bgt.n	8001286 <_printf_i+0x216>
 80012a0:	e7eb      	b.n	800127a <_printf_i+0x20a>
 80012a2:	2500      	movs	r5, #0
 80012a4:	f104 0619 	add.w	r6, r4, #25
 80012a8:	e7f5      	b.n	8001296 <_printf_i+0x226>
 80012aa:	bf00      	nop
 80012ac:	080018b7 	.word	0x080018b7
 80012b0:	080018c8 	.word	0x080018c8

080012b4 <__sflush_r>:
 80012b4:	898a      	ldrh	r2, [r1, #12]
 80012b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ba:	4605      	mov	r5, r0
 80012bc:	0710      	lsls	r0, r2, #28
 80012be:	460c      	mov	r4, r1
 80012c0:	d458      	bmi.n	8001374 <__sflush_r+0xc0>
 80012c2:	684b      	ldr	r3, [r1, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dc05      	bgt.n	80012d4 <__sflush_r+0x20>
 80012c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dc02      	bgt.n	80012d4 <__sflush_r+0x20>
 80012ce:	2000      	movs	r0, #0
 80012d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012d6:	2e00      	cmp	r6, #0
 80012d8:	d0f9      	beq.n	80012ce <__sflush_r+0x1a>
 80012da:	2300      	movs	r3, #0
 80012dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012e0:	682f      	ldr	r7, [r5, #0]
 80012e2:	6a21      	ldr	r1, [r4, #32]
 80012e4:	602b      	str	r3, [r5, #0]
 80012e6:	d032      	beq.n	800134e <__sflush_r+0x9a>
 80012e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	075a      	lsls	r2, r3, #29
 80012ee:	d505      	bpl.n	80012fc <__sflush_r+0x48>
 80012f0:	6863      	ldr	r3, [r4, #4]
 80012f2:	1ac0      	subs	r0, r0, r3
 80012f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012f6:	b10b      	cbz	r3, 80012fc <__sflush_r+0x48>
 80012f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012fa:	1ac0      	subs	r0, r0, r3
 80012fc:	2300      	movs	r3, #0
 80012fe:	4602      	mov	r2, r0
 8001300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001302:	6a21      	ldr	r1, [r4, #32]
 8001304:	4628      	mov	r0, r5
 8001306:	47b0      	blx	r6
 8001308:	1c43      	adds	r3, r0, #1
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	d106      	bne.n	800131c <__sflush_r+0x68>
 800130e:	6829      	ldr	r1, [r5, #0]
 8001310:	291d      	cmp	r1, #29
 8001312:	d82b      	bhi.n	800136c <__sflush_r+0xb8>
 8001314:	4a29      	ldr	r2, [pc, #164]	; (80013bc <__sflush_r+0x108>)
 8001316:	410a      	asrs	r2, r1
 8001318:	07d6      	lsls	r6, r2, #31
 800131a:	d427      	bmi.n	800136c <__sflush_r+0xb8>
 800131c:	2200      	movs	r2, #0
 800131e:	6062      	str	r2, [r4, #4]
 8001320:	04d9      	lsls	r1, r3, #19
 8001322:	6922      	ldr	r2, [r4, #16]
 8001324:	6022      	str	r2, [r4, #0]
 8001326:	d504      	bpl.n	8001332 <__sflush_r+0x7e>
 8001328:	1c42      	adds	r2, r0, #1
 800132a:	d101      	bne.n	8001330 <__sflush_r+0x7c>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b903      	cbnz	r3, 8001332 <__sflush_r+0x7e>
 8001330:	6560      	str	r0, [r4, #84]	; 0x54
 8001332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001334:	602f      	str	r7, [r5, #0]
 8001336:	2900      	cmp	r1, #0
 8001338:	d0c9      	beq.n	80012ce <__sflush_r+0x1a>
 800133a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800133e:	4299      	cmp	r1, r3
 8001340:	d002      	beq.n	8001348 <__sflush_r+0x94>
 8001342:	4628      	mov	r0, r5
 8001344:	f7ff fbe2 	bl	8000b0c <_free_r>
 8001348:	2000      	movs	r0, #0
 800134a:	6360      	str	r0, [r4, #52]	; 0x34
 800134c:	e7c0      	b.n	80012d0 <__sflush_r+0x1c>
 800134e:	2301      	movs	r3, #1
 8001350:	4628      	mov	r0, r5
 8001352:	47b0      	blx	r6
 8001354:	1c41      	adds	r1, r0, #1
 8001356:	d1c8      	bne.n	80012ea <__sflush_r+0x36>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0c5      	beq.n	80012ea <__sflush_r+0x36>
 800135e:	2b1d      	cmp	r3, #29
 8001360:	d001      	beq.n	8001366 <__sflush_r+0xb2>
 8001362:	2b16      	cmp	r3, #22
 8001364:	d101      	bne.n	800136a <__sflush_r+0xb6>
 8001366:	602f      	str	r7, [r5, #0]
 8001368:	e7b1      	b.n	80012ce <__sflush_r+0x1a>
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001370:	81a3      	strh	r3, [r4, #12]
 8001372:	e7ad      	b.n	80012d0 <__sflush_r+0x1c>
 8001374:	690f      	ldr	r7, [r1, #16]
 8001376:	2f00      	cmp	r7, #0
 8001378:	d0a9      	beq.n	80012ce <__sflush_r+0x1a>
 800137a:	0793      	lsls	r3, r2, #30
 800137c:	680e      	ldr	r6, [r1, #0]
 800137e:	bf08      	it	eq
 8001380:	694b      	ldreq	r3, [r1, #20]
 8001382:	600f      	str	r7, [r1, #0]
 8001384:	bf18      	it	ne
 8001386:	2300      	movne	r3, #0
 8001388:	eba6 0807 	sub.w	r8, r6, r7
 800138c:	608b      	str	r3, [r1, #8]
 800138e:	f1b8 0f00 	cmp.w	r8, #0
 8001392:	dd9c      	ble.n	80012ce <__sflush_r+0x1a>
 8001394:	6a21      	ldr	r1, [r4, #32]
 8001396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001398:	4643      	mov	r3, r8
 800139a:	463a      	mov	r2, r7
 800139c:	4628      	mov	r0, r5
 800139e:	47b0      	blx	r6
 80013a0:	2800      	cmp	r0, #0
 80013a2:	dc06      	bgt.n	80013b2 <__sflush_r+0xfe>
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	81a3      	strh	r3, [r4, #12]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	e78e      	b.n	80012d0 <__sflush_r+0x1c>
 80013b2:	4407      	add	r7, r0
 80013b4:	eba8 0800 	sub.w	r8, r8, r0
 80013b8:	e7e9      	b.n	800138e <__sflush_r+0xda>
 80013ba:	bf00      	nop
 80013bc:	dfbffffe 	.word	0xdfbffffe

080013c0 <_fflush_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	690b      	ldr	r3, [r1, #16]
 80013c4:	4605      	mov	r5, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	b913      	cbnz	r3, 80013d0 <_fflush_r+0x10>
 80013ca:	2500      	movs	r5, #0
 80013cc:	4628      	mov	r0, r5
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	b118      	cbz	r0, 80013da <_fflush_r+0x1a>
 80013d2:	6a03      	ldr	r3, [r0, #32]
 80013d4:	b90b      	cbnz	r3, 80013da <_fflush_r+0x1a>
 80013d6:	f7ff fa6d 	bl	80008b4 <__sinit>
 80013da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f3      	beq.n	80013ca <_fflush_r+0xa>
 80013e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013e4:	07d0      	lsls	r0, r2, #31
 80013e6:	d404      	bmi.n	80013f2 <_fflush_r+0x32>
 80013e8:	0599      	lsls	r1, r3, #22
 80013ea:	d402      	bmi.n	80013f2 <_fflush_r+0x32>
 80013ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ee:	f7ff fb6d 	bl	8000acc <__retarget_lock_acquire_recursive>
 80013f2:	4628      	mov	r0, r5
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff ff5d 	bl	80012b4 <__sflush_r>
 80013fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013fc:	07da      	lsls	r2, r3, #31
 80013fe:	4605      	mov	r5, r0
 8001400:	d4e4      	bmi.n	80013cc <_fflush_r+0xc>
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	059b      	lsls	r3, r3, #22
 8001406:	d4e1      	bmi.n	80013cc <_fflush_r+0xc>
 8001408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140a:	f7ff fb60 	bl	8000ace <__retarget_lock_release_recursive>
 800140e:	e7dd      	b.n	80013cc <_fflush_r+0xc>

08001410 <fiprintf>:
 8001410:	b40e      	push	{r1, r2, r3}
 8001412:	b503      	push	{r0, r1, lr}
 8001414:	4601      	mov	r1, r0
 8001416:	ab03      	add	r3, sp, #12
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <fiprintf+0x20>)
 800141a:	f853 2b04 	ldr.w	r2, [r3], #4
 800141e:	6800      	ldr	r0, [r0, #0]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f7ff fc9d 	bl	8000d60 <_vfiprintf_r>
 8001426:	b002      	add	sp, #8
 8001428:	f85d eb04 	ldr.w	lr, [sp], #4
 800142c:	b003      	add	sp, #12
 800142e:	4770      	bx	lr
 8001430:	200000a4 	.word	0x200000a4

08001434 <_putc_r>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	460d      	mov	r5, r1
 8001438:	4614      	mov	r4, r2
 800143a:	4606      	mov	r6, r0
 800143c:	b118      	cbz	r0, 8001446 <_putc_r+0x12>
 800143e:	6a03      	ldr	r3, [r0, #32]
 8001440:	b90b      	cbnz	r3, 8001446 <_putc_r+0x12>
 8001442:	f7ff fa37 	bl	80008b4 <__sinit>
 8001446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001448:	07d8      	lsls	r0, r3, #31
 800144a:	d405      	bmi.n	8001458 <_putc_r+0x24>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	0599      	lsls	r1, r3, #22
 8001450:	d402      	bmi.n	8001458 <_putc_r+0x24>
 8001452:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001454:	f7ff fb3a 	bl	8000acc <__retarget_lock_acquire_recursive>
 8001458:	68a3      	ldr	r3, [r4, #8]
 800145a:	3b01      	subs	r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	60a3      	str	r3, [r4, #8]
 8001460:	da05      	bge.n	800146e <_putc_r+0x3a>
 8001462:	69a2      	ldr	r2, [r4, #24]
 8001464:	4293      	cmp	r3, r2
 8001466:	db12      	blt.n	800148e <_putc_r+0x5a>
 8001468:	b2eb      	uxtb	r3, r5
 800146a:	2b0a      	cmp	r3, #10
 800146c:	d00f      	beq.n	800148e <_putc_r+0x5a>
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	6022      	str	r2, [r4, #0]
 8001474:	701d      	strb	r5, [r3, #0]
 8001476:	b2ed      	uxtb	r5, r5
 8001478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800147a:	07da      	lsls	r2, r3, #31
 800147c:	d405      	bmi.n	800148a <_putc_r+0x56>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	059b      	lsls	r3, r3, #22
 8001482:	d402      	bmi.n	800148a <_putc_r+0x56>
 8001484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001486:	f7ff fb22 	bl	8000ace <__retarget_lock_release_recursive>
 800148a:	4628      	mov	r0, r5
 800148c:	bd70      	pop	{r4, r5, r6, pc}
 800148e:	4629      	mov	r1, r5
 8001490:	4622      	mov	r2, r4
 8001492:	4630      	mov	r0, r6
 8001494:	f000 f802 	bl	800149c <__swbuf_r>
 8001498:	4605      	mov	r5, r0
 800149a:	e7ed      	b.n	8001478 <_putc_r+0x44>

0800149c <__swbuf_r>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	460e      	mov	r6, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	4605      	mov	r5, r0
 80014a4:	b118      	cbz	r0, 80014ae <__swbuf_r+0x12>
 80014a6:	6a03      	ldr	r3, [r0, #32]
 80014a8:	b90b      	cbnz	r3, 80014ae <__swbuf_r+0x12>
 80014aa:	f7ff fa03 	bl	80008b4 <__sinit>
 80014ae:	69a3      	ldr	r3, [r4, #24]
 80014b0:	60a3      	str	r3, [r4, #8]
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	071a      	lsls	r2, r3, #28
 80014b6:	d525      	bpl.n	8001504 <__swbuf_r+0x68>
 80014b8:	6923      	ldr	r3, [r4, #16]
 80014ba:	b31b      	cbz	r3, 8001504 <__swbuf_r+0x68>
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	6922      	ldr	r2, [r4, #16]
 80014c0:	1a98      	subs	r0, r3, r2
 80014c2:	6963      	ldr	r3, [r4, #20]
 80014c4:	b2f6      	uxtb	r6, r6
 80014c6:	4283      	cmp	r3, r0
 80014c8:	4637      	mov	r7, r6
 80014ca:	dc04      	bgt.n	80014d6 <__swbuf_r+0x3a>
 80014cc:	4621      	mov	r1, r4
 80014ce:	4628      	mov	r0, r5
 80014d0:	f7ff ff76 	bl	80013c0 <_fflush_r>
 80014d4:	b9e0      	cbnz	r0, 8001510 <__swbuf_r+0x74>
 80014d6:	68a3      	ldr	r3, [r4, #8]
 80014d8:	3b01      	subs	r3, #1
 80014da:	60a3      	str	r3, [r4, #8]
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	701e      	strb	r6, [r3, #0]
 80014e4:	6962      	ldr	r2, [r4, #20]
 80014e6:	1c43      	adds	r3, r0, #1
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d004      	beq.n	80014f6 <__swbuf_r+0x5a>
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	07db      	lsls	r3, r3, #31
 80014f0:	d506      	bpl.n	8001500 <__swbuf_r+0x64>
 80014f2:	2e0a      	cmp	r6, #10
 80014f4:	d104      	bne.n	8001500 <__swbuf_r+0x64>
 80014f6:	4621      	mov	r1, r4
 80014f8:	4628      	mov	r0, r5
 80014fa:	f7ff ff61 	bl	80013c0 <_fflush_r>
 80014fe:	b938      	cbnz	r0, 8001510 <__swbuf_r+0x74>
 8001500:	4638      	mov	r0, r7
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001504:	4621      	mov	r1, r4
 8001506:	4628      	mov	r0, r5
 8001508:	f000 f806 	bl	8001518 <__swsetup_r>
 800150c:	2800      	cmp	r0, #0
 800150e:	d0d5      	beq.n	80014bc <__swbuf_r+0x20>
 8001510:	f04f 37ff 	mov.w	r7, #4294967295
 8001514:	e7f4      	b.n	8001500 <__swbuf_r+0x64>
	...

08001518 <__swsetup_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <__swsetup_r+0xac>)
 800151c:	4605      	mov	r5, r0
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	460c      	mov	r4, r1
 8001522:	b118      	cbz	r0, 800152c <__swsetup_r+0x14>
 8001524:	6a03      	ldr	r3, [r0, #32]
 8001526:	b90b      	cbnz	r3, 800152c <__swsetup_r+0x14>
 8001528:	f7ff f9c4 	bl	80008b4 <__sinit>
 800152c:	89a3      	ldrh	r3, [r4, #12]
 800152e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001532:	0718      	lsls	r0, r3, #28
 8001534:	d422      	bmi.n	800157c <__swsetup_r+0x64>
 8001536:	06d9      	lsls	r1, r3, #27
 8001538:	d407      	bmi.n	800154a <__swsetup_r+0x32>
 800153a:	2309      	movs	r3, #9
 800153c:	602b      	str	r3, [r5, #0]
 800153e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001542:	81a3      	strh	r3, [r4, #12]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	e034      	b.n	80015b4 <__swsetup_r+0x9c>
 800154a:	0758      	lsls	r0, r3, #29
 800154c:	d512      	bpl.n	8001574 <__swsetup_r+0x5c>
 800154e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001550:	b141      	cbz	r1, 8001564 <__swsetup_r+0x4c>
 8001552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001556:	4299      	cmp	r1, r3
 8001558:	d002      	beq.n	8001560 <__swsetup_r+0x48>
 800155a:	4628      	mov	r0, r5
 800155c:	f7ff fad6 	bl	8000b0c <_free_r>
 8001560:	2300      	movs	r3, #0
 8001562:	6363      	str	r3, [r4, #52]	; 0x34
 8001564:	89a3      	ldrh	r3, [r4, #12]
 8001566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800156a:	81a3      	strh	r3, [r4, #12]
 800156c:	2300      	movs	r3, #0
 800156e:	6063      	str	r3, [r4, #4]
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	6023      	str	r3, [r4, #0]
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	6923      	ldr	r3, [r4, #16]
 800157e:	b94b      	cbnz	r3, 8001594 <__swsetup_r+0x7c>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800158a:	d003      	beq.n	8001594 <__swsetup_r+0x7c>
 800158c:	4621      	mov	r1, r4
 800158e:	4628      	mov	r0, r5
 8001590:	f000 f857 	bl	8001642 <__smakebuf_r>
 8001594:	89a0      	ldrh	r0, [r4, #12]
 8001596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800159a:	f010 0301 	ands.w	r3, r0, #1
 800159e:	d00a      	beq.n	80015b6 <__swsetup_r+0x9e>
 80015a0:	2300      	movs	r3, #0
 80015a2:	60a3      	str	r3, [r4, #8]
 80015a4:	6963      	ldr	r3, [r4, #20]
 80015a6:	425b      	negs	r3, r3
 80015a8:	61a3      	str	r3, [r4, #24]
 80015aa:	6923      	ldr	r3, [r4, #16]
 80015ac:	b943      	cbnz	r3, 80015c0 <__swsetup_r+0xa8>
 80015ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015b2:	d1c4      	bne.n	800153e <__swsetup_r+0x26>
 80015b4:	bd38      	pop	{r3, r4, r5, pc}
 80015b6:	0781      	lsls	r1, r0, #30
 80015b8:	bf58      	it	pl
 80015ba:	6963      	ldrpl	r3, [r4, #20]
 80015bc:	60a3      	str	r3, [r4, #8]
 80015be:	e7f4      	b.n	80015aa <__swsetup_r+0x92>
 80015c0:	2000      	movs	r0, #0
 80015c2:	e7f7      	b.n	80015b4 <__swsetup_r+0x9c>
 80015c4:	200000a4 	.word	0x200000a4

080015c8 <_sbrk_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d06      	ldr	r5, [pc, #24]	; (80015e4 <_sbrk_r+0x1c>)
 80015cc:	2300      	movs	r3, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	f7ff f830 	bl	8000638 <_sbrk>
 80015d8:	1c43      	adds	r3, r0, #1
 80015da:	d102      	bne.n	80015e2 <_sbrk_r+0x1a>
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	b103      	cbz	r3, 80015e2 <_sbrk_r+0x1a>
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	20000208 	.word	0x20000208

080015e8 <abort>:
 80015e8:	b508      	push	{r3, lr}
 80015ea:	2006      	movs	r0, #6
 80015ec:	f000 f88e 	bl	800170c <raise>
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7fe ffa9 	bl	8000548 <_exit>

080015f6 <__swhatbuf_r>:
 80015f6:	b570      	push	{r4, r5, r6, lr}
 80015f8:	460c      	mov	r4, r1
 80015fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015fe:	2900      	cmp	r1, #0
 8001600:	b096      	sub	sp, #88	; 0x58
 8001602:	4615      	mov	r5, r2
 8001604:	461e      	mov	r6, r3
 8001606:	da0d      	bge.n	8001624 <__swhatbuf_r+0x2e>
 8001608:	89a3      	ldrh	r3, [r4, #12]
 800160a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	bf0c      	ite	eq
 8001614:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001618:	2340      	movne	r3, #64	; 0x40
 800161a:	2000      	movs	r0, #0
 800161c:	6031      	str	r1, [r6, #0]
 800161e:	602b      	str	r3, [r5, #0]
 8001620:	b016      	add	sp, #88	; 0x58
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	466a      	mov	r2, sp
 8001626:	f000 f879 	bl	800171c <_fstat_r>
 800162a:	2800      	cmp	r0, #0
 800162c:	dbec      	blt.n	8001608 <__swhatbuf_r+0x12>
 800162e:	9901      	ldr	r1, [sp, #4]
 8001630:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001634:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001638:	4259      	negs	r1, r3
 800163a:	4159      	adcs	r1, r3
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	e7eb      	b.n	800161a <__swhatbuf_r+0x24>

08001642 <__smakebuf_r>:
 8001642:	898b      	ldrh	r3, [r1, #12]
 8001644:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001646:	079d      	lsls	r5, r3, #30
 8001648:	4606      	mov	r6, r0
 800164a:	460c      	mov	r4, r1
 800164c:	d507      	bpl.n	800165e <__smakebuf_r+0x1c>
 800164e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	6123      	str	r3, [r4, #16]
 8001656:	2301      	movs	r3, #1
 8001658:	6163      	str	r3, [r4, #20]
 800165a:	b002      	add	sp, #8
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	ab01      	add	r3, sp, #4
 8001660:	466a      	mov	r2, sp
 8001662:	f7ff ffc8 	bl	80015f6 <__swhatbuf_r>
 8001666:	9900      	ldr	r1, [sp, #0]
 8001668:	4605      	mov	r5, r0
 800166a:	4630      	mov	r0, r6
 800166c:	f7ff fac2 	bl	8000bf4 <_malloc_r>
 8001670:	b948      	cbnz	r0, 8001686 <__smakebuf_r+0x44>
 8001672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001676:	059a      	lsls	r2, r3, #22
 8001678:	d4ef      	bmi.n	800165a <__smakebuf_r+0x18>
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	81a3      	strh	r3, [r4, #12]
 8001684:	e7e3      	b.n	800164e <__smakebuf_r+0xc>
 8001686:	89a3      	ldrh	r3, [r4, #12]
 8001688:	6020      	str	r0, [r4, #0]
 800168a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168e:	81a3      	strh	r3, [r4, #12]
 8001690:	9b00      	ldr	r3, [sp, #0]
 8001692:	6163      	str	r3, [r4, #20]
 8001694:	9b01      	ldr	r3, [sp, #4]
 8001696:	6120      	str	r0, [r4, #16]
 8001698:	b15b      	cbz	r3, 80016b2 <__smakebuf_r+0x70>
 800169a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800169e:	4630      	mov	r0, r6
 80016a0:	f000 f84e 	bl	8001740 <_isatty_r>
 80016a4:	b128      	cbz	r0, 80016b2 <__smakebuf_r+0x70>
 80016a6:	89a3      	ldrh	r3, [r4, #12]
 80016a8:	f023 0303 	bic.w	r3, r3, #3
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	81a3      	strh	r3, [r4, #12]
 80016b2:	89a3      	ldrh	r3, [r4, #12]
 80016b4:	431d      	orrs	r5, r3
 80016b6:	81a5      	strh	r5, [r4, #12]
 80016b8:	e7cf      	b.n	800165a <__smakebuf_r+0x18>

080016ba <_raise_r>:
 80016ba:	291f      	cmp	r1, #31
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4604      	mov	r4, r0
 80016c0:	460d      	mov	r5, r1
 80016c2:	d904      	bls.n	80016ce <_raise_r+0x14>
 80016c4:	2316      	movs	r3, #22
 80016c6:	6003      	str	r3, [r0, #0]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	bd38      	pop	{r3, r4, r5, pc}
 80016ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016d0:	b112      	cbz	r2, 80016d8 <_raise_r+0x1e>
 80016d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80016d6:	b94b      	cbnz	r3, 80016ec <_raise_r+0x32>
 80016d8:	4620      	mov	r0, r4
 80016da:	f000 f853 	bl	8001784 <_getpid_r>
 80016de:	462a      	mov	r2, r5
 80016e0:	4601      	mov	r1, r0
 80016e2:	4620      	mov	r0, r4
 80016e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016e8:	f000 b83a 	b.w	8001760 <_kill_r>
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d00a      	beq.n	8001706 <_raise_r+0x4c>
 80016f0:	1c59      	adds	r1, r3, #1
 80016f2:	d103      	bne.n	80016fc <_raise_r+0x42>
 80016f4:	2316      	movs	r3, #22
 80016f6:	6003      	str	r3, [r0, #0]
 80016f8:	2001      	movs	r0, #1
 80016fa:	e7e7      	b.n	80016cc <_raise_r+0x12>
 80016fc:	2400      	movs	r4, #0
 80016fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001702:	4628      	mov	r0, r5
 8001704:	4798      	blx	r3
 8001706:	2000      	movs	r0, #0
 8001708:	e7e0      	b.n	80016cc <_raise_r+0x12>
	...

0800170c <raise>:
 800170c:	4b02      	ldr	r3, [pc, #8]	; (8001718 <raise+0xc>)
 800170e:	4601      	mov	r1, r0
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	f7ff bfd2 	b.w	80016ba <_raise_r>
 8001716:	bf00      	nop
 8001718:	200000a4 	.word	0x200000a4

0800171c <_fstat_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4d07      	ldr	r5, [pc, #28]	; (800173c <_fstat_r+0x20>)
 8001720:	2300      	movs	r3, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	602b      	str	r3, [r5, #0]
 800172a:	f7fe ff5c 	bl	80005e6 <_fstat>
 800172e:	1c43      	adds	r3, r0, #1
 8001730:	d102      	bne.n	8001738 <_fstat_r+0x1c>
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	b103      	cbz	r3, 8001738 <_fstat_r+0x1c>
 8001736:	6023      	str	r3, [r4, #0]
 8001738:	bd38      	pop	{r3, r4, r5, pc}
 800173a:	bf00      	nop
 800173c:	20000208 	.word	0x20000208

08001740 <_isatty_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d06      	ldr	r5, [pc, #24]	; (800175c <_isatty_r+0x1c>)
 8001744:	2300      	movs	r3, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	602b      	str	r3, [r5, #0]
 800174c:	f7fe ff5b 	bl	8000606 <_isatty>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d102      	bne.n	800175a <_isatty_r+0x1a>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	b103      	cbz	r3, 800175a <_isatty_r+0x1a>
 8001758:	6023      	str	r3, [r4, #0]
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	20000208 	.word	0x20000208

08001760 <_kill_r>:
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	4d07      	ldr	r5, [pc, #28]	; (8001780 <_kill_r+0x20>)
 8001764:	2300      	movs	r3, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	602b      	str	r3, [r5, #0]
 800176e:	f7fe fedb 	bl	8000528 <_kill>
 8001772:	1c43      	adds	r3, r0, #1
 8001774:	d102      	bne.n	800177c <_kill_r+0x1c>
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	b103      	cbz	r3, 800177c <_kill_r+0x1c>
 800177a:	6023      	str	r3, [r4, #0]
 800177c:	bd38      	pop	{r3, r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	20000208 	.word	0x20000208

08001784 <_getpid_r>:
 8001784:	f7fe bec8 	b.w	8000518 <_getpid>

08001788 <_init>:
 8001788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178a:	bf00      	nop
 800178c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178e:	bc08      	pop	{r3}
 8001790:	469e      	mov	lr, r3
 8001792:	4770      	bx	lr

08001794 <_fini>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr
